{"version":3,"file":"static/js/951.c545ba5f.chunk.js","mappings":"sMASA,MAAMA,EAAeC,EAAAA,GAAOC,OAAMC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,w/BAeZC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAAMC,EAAa,OAAS,UAAU,IAuBrEC,GAAkBN,EAAAA,EAAAA,IAAOD,EAAPC,CAAoBO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,oCACtBK,IAAA,IAAC,cAAEC,GAAeD,EAAA,OACpCC,EAAgB,UAAY,OAAO,IAGjCC,GAAoBV,EAAAA,EAAAA,IAAOD,EAAPC,CAAoBW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,sCA2C9C,EAvCgBS,KACd,MAAOP,EAAYQ,IAAiBC,EAAAA,EAAAA,WAAS,IACtCL,EAAeM,IAAoBD,EAAAA,EAAAA,WAAS,GAmBnD,OAGEE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACpB,EAAY,CAACM,WAAYA,EAAYe,QArBnBC,IAAMR,GAAeR,GAqBsBa,SAAC,wBAG/DC,EAAAA,EAAAA,KAACb,EAAe,CACdG,cAAeA,EACfW,QAzBoBE,IAAMP,GAAkBN,GAyBjBS,SAC5B,oCAGDC,EAAAA,EAAAA,KAACT,EAAiB,CAAAQ,UAACC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iCACxB,C","sources":["040_css_in_js/end/Example.js"],"sourcesContent":["/* POINT css-in-js（styled-components） */\r\n\r\nimport { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// POINT 拡張機能 styled-components.vscode-styled-components\r\n\r\n/* POINT 生成する要素を指定し、スタイルをテンプレートリテラルで記述します */\r\n// React要素扱いなので変数名は大文字で記述！\r\nconst StyledButton = styled.button`\r\n  margin-inline: auto;\r\n  border-radius: 9999px;\r\n  border: none;\r\n  display: block;\r\n  width: 120px;\r\n  height: 60px;\r\n  margin: 10px auto;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  line-height: 60px;\r\n  /* POINT valueを関数にすることで、引数にpropsを受け取ることができる。\r\n  { isSelected } の部分を変更することで受け取る名前を変更することができる。\r\n   */\r\n  background-color: ${({ isSelected }) => (isSelected ? \"pink\" : \"darkcyan\")};\r\n  transition: all 0.3s ease-out;\r\n\r\n  /* POINT 疑似クラスの追加 */\r\n  :hover,\r\n  :active {\r\n    opacity: 0.7;\r\n    transform: scale(1.1);\r\n  }\r\n  span {\r\n    color: purple;\r\n  }\r\n  /* POINT メディアクエリ */\r\n  @media (max-width: 600px) {\r\n    border-radius: 0;\r\n  }\r\n\r\n  :global {\r\n    background-color: black;\r\n  }\r\n`;\r\n\r\n// POINT スタイルの継承。styled()でラップする\r\nconst StyledSubButton = styled(StyledButton)`\r\n  background-color: ${({ isSelectedSub }) =>\r\n    isSelectedSub ? \"crimson\" : \"coral\"};\r\n`;\r\n\r\nconst StyledOliveButton = styled(StyledButton)`\r\n  background-color: olive;\r\n`;\r\n\r\nconst Example = () => {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n  const [isSelectedSub, setIsSelectedSub] = useState(false);\r\n\r\n  const onClickHandler = () => setIsSelected(!isSelected);\r\n  const onClickSubHandler = () => setIsSelectedSub(!isSelectedSub);\r\n\r\n  /* POINT css-in-jsのメリットとデメリット\r\n  メリット\r\n    スタイルをコンポーネントで定義するので、外部のcssに依存することなくコンポーネント単体で動作する\r\n    JavaScriptで記述するため、JSの文法が使用出来たり、propsとして値を渡すこともできる\r\n    ユニークなクラス名が自動生成され他のコンポーネントに影響を与えないことが保証される\r\n    cssの設計が必要なくなる\r\n    コンポーネントで完結しているため、他のプロジェクトで再利用がしやすい\r\n  デメリット\r\n    自動生成されるユニークなクラス名が読めない\r\n    cssに比べパフォーマンスに劣る\r\n    ※ 些細な差なのでデメリットというほどでも無い\r\n    ※ どうしても気になる方は、Nextjsを使用することでパフォーマンスの面は気にしなくてよくなります。\r\n  */\r\n\r\n  return (\r\n    // 属性にある isSelected は 上記で定義されています。\r\n    // background-color: ${({ isSelected }) => ~~~ };\r\n    <>\r\n      <StyledButton isSelected={isSelected} onClick={onClickHandler}>\r\n        ボタン\r\n      </StyledButton>\r\n      <StyledSubButton\r\n        isSelectedSub={isSelectedSub}\r\n        onClick={onClickSubHandler}\r\n      >\r\n        サブボタン\r\n      </StyledSubButton>\r\n      <StyledOliveButton><span>オリーブ</span></StyledOliveButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n"],"names":["StyledButton","styled","button","_templateObject","_taggedTemplateLiteral","_ref","isSelected","StyledSubButton","_templateObject2","_ref2","isSelectedSub","StyledOliveButton","_templateObject3","Example","setIsSelected","useState","setIsSelectedSub","_jsxs","_Fragment","children","_jsx","onClick","onClickHandler","onClickSubHandler"],"sourceRoot":""}