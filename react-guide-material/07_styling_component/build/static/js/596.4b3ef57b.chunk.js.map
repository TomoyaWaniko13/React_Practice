{"version":3,"file":"static/js/596.4b3ef57b.chunk.js","mappings":"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","sources":["050_chakra_ui/end/Example.js","050_chakra_ui/end/components/Form.js","050_chakra_ui/end/components/List.js","050_chakra_ui/end/components/Todo.js"],"sourcesContent":["/* POINT Chakra UIのインポート\r\nhttps://chakra-ui.com/\r\n*/\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nimport Todo from \"./components/Todo\";\r\n\r\nconst Example = () => {\r\n  // POINT Chakra UIを使用するためにChakraProviderでラップする\r\n  return (\r\n    <>\r\n      <ChakraProvider>\r\n        <Todo />\r\n      </ChakraProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n","import { useState } from \"react\";\r\nimport { HStack, Input, Button, useToast } from \"@chakra-ui/react\";\r\n\r\nconst Form = ({ createTodo }) => {\r\n  const [enteredTodo, setEnteredTodo] = useState(\"\");\r\n\r\n  const toast = useToast();\r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!enteredTodo) {\r\n      toast({\r\n        title: \"新しいタスクを入力してください\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      id: Math.floor(Math.random() * 1e5),\r\n      content: enteredTodo,\r\n    };\r\n\r\n    createTodo(newTodo);\r\n\r\n    setEnteredTodo(\"\");\r\n\r\n    toast({\r\n      title: \"新しいタスクを追加しました！\",\r\n      description: enteredTodo,\r\n      status: \"info\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });  \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addTodo}>\r\n      <HStack>\r\n        {/* POINT ChakraのInputコンポーネントを使う  */}\r\n        <Input\r\n          placeholder=\"新しいタスク\"\r\n          _placeholder={{ opacity: \"0.3\", color: \"gray.500\" }}\r\n          size=\"lg\"\r\n          p={3}\r\n          bgColor=\"white\"\r\n          variant=\"flushed\"\r\n          value={enteredTodo}\r\n          onChange={(e) => setEnteredTodo(e.target.value)}\r\n        />\r\n        <Button\r\n          colorScheme=\"blue\"\r\n          size=\"md\"\r\n          bgColor=\"white\"\r\n          variant=\"outline\"\r\n          px={7}\r\n          type=\"submit\"\r\n        >\r\n          追加\r\n        </Button>\r\n      </HStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { VStack, StackDivider, HStack, IconButton, Text } from \"@chakra-ui/react\";\r\n\r\n// POINT react-iconsからアイコンをインポート\r\nimport { VscCheck } from \"react-icons/vsc\";\r\n\r\nconst List = ({ todos, deleteTodo }) => {\r\n  const complete = (id) => {\r\n    deleteTodo(id);\r\n  };\r\n  return (\r\n    <VStack\r\n      divider={<StackDivider />}\r\n      width=\"80%\"\r\n      bgColor=\"white\"\r\n      // color={{ sm: 'red.600', md: 'blue.600', lg: 'green.500', xl: 'red.600' }}\r\n      borderColor=\"blackAlpha.100\"\r\n      borderWidth=\"1px\"\r\n      borderRadius=\"3px\"\r\n      p={5}\r\n      alignItems=\"start\"\r\n    >\r\n      {todos.map((todo) => {\r\n        return (\r\n          <HStack key={todo.id} spacing=\"5\">\r\n            <IconButton\r\n              onClick={() => complete(todo.id)}\r\n              icon={<VscCheck />}\r\n              isRound\r\n              bgColor=\"cyan.100\"\r\n              opacity=\"0.5\"\r\n            >\r\n              完了\r\n            </IconButton>\r\n            <Text>{todo.content}</Text>\r\n          </HStack>\r\n        );\r\n      })}\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { useState } from \"react\";\r\n// POINT Chakra UIのホームページから使用したいコンポーネントを見つけてインポート\r\nimport { VStack, Heading } from \"@chakra-ui/react\";\r\n\r\nimport List from \"./List\";\r\nimport Form from \"./Form\";\r\n\r\nconst Todo = () => {\r\n  const todosList = [\r\n    {\r\n      id: 1,\r\n      content: \"店予約する\",\r\n    },\r\n    {\r\n      id: 2,\r\n      content: \"卵買う\",\r\n    },\r\n    {\r\n      id: 3,\r\n      content: \"郵便出す\",\r\n    },\r\n  ];\r\n\r\n  const [todos, setTodos] = useState(todosList);\r\n\r\n  const deleteTodo = (id) => {\r\n    const newTodos = todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const createTodo = (todo) => {\r\n    setTodos([...todos, todo]);\r\n  };\r\n\r\n  return (\r\n    <VStack p=\"10\" spacing=\"10\">\r\n      <Heading color=\"blue.200\" fontSize=\"5xl\">\r\n        Reminder\r\n      </Heading>\r\n      <List todos={todos} deleteTodo={deleteTodo} />\r\n      <Form createTodo={createTodo} />\r\n    </VStack>\r\n  );\r\n};\r\nexport default Todo;\r\n"],"names":["Example","_jsx","_Fragment","children","ChakraProvider","Todo","_ref","createTodo","enteredTodo","setEnteredTodo","useState","toast","useToast","onSubmit","e","preventDefault","title","status","duration","isClosable","newTodo","id","Math","floor","random","content","description","_jsxs","HStack","Input","placeholder","_placeholder","opacity","color","size","p","bgColor","variant","value","onChange","target","Button","colorScheme","px","type","todos","deleteTodo","VStack","divider","StackDivider","width","borderColor","borderWidth","borderRadius","alignItems","map","todo","spacing","IconButton","onClick","complete","icon","VscCheck","isRound","Text","setTodos","Heading","fontSize","List","newTodos","filter","Form"],"sourceRoot":""}